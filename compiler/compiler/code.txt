MOVI R0, 0; Escalar temporal 1
MOVI R1, 1; Registro escalar de seleccion
MOVI R2, 0; Registro escalar index

VMOVI V0, 0; Se inicia el vector de entrada rojo
VMOVI V1, 0; Se inicializa el vector de entrada verde
VMOVI V2, 0; Se inicializa el vector de entrada azul 

VMOVI V3, 0; Se inicializa el vector de resultados rojo
VMOVI V4, 0; Se inicializa el vector de resultados verde
VMOVI V5, 0; Se inicializa el vector de resultados azul

VMOVI V6, 0; Se inicializa el vector temporal de 1
VMOVI V7, 0; Vector Mascara
JMP _declarar

_sepia
    
    VMOVI V3, 0; Se inicializa el vector resultRed en 0

    MOVI R0, b0000000000110010010; Se mueve el numero al registro
    VSMUL V6, V0, R0; Se multiplica el escalar por el vector de entrada rojo
    VADD V3, V3, V6; Se multiplican los vectores y se guardan en ResRojo

    MOVI R0, b0000000001100010011; Se guarda el valor en binario
    VSMUL V6, V1, R0; Se multiplica el escalar por el vector de entrada verde
    VADD V3, V3, V6; Se multiplican los vectores y se guardan en ResRojo

    MOVI R0, b0000000000011000001; Se mueve el binario al registro
    VSMUL V6, V2, R0; Se multiplica el escalar por el vector de entrada azul
    VADD V3, V3, V6; Se multiplican los vectores y se guardan en ResRojo

    ;Pedazo de codigo para la mascara
    VMOVI V7, b111111110000000000; Vector 255 en binario
    VMOVI V6, 0; Se resetean los valores del vector
    VCMPLT V3, V6;Vector mascara para Red
    VMOVV V3, V3, V7; Se usa el comparador con la mascara, ya sea de V3 o de V6
    VCMPRST



    ;CODIGO PARA EL OUTPUT VERDE
    VMOVI V4, 0; Se inicializa el vector de resultados verde

    MOVI R0, b0000000000101100101; Se mueve el numero al registro
    VSMUL V6, V0, R0; Se multiplica el escalar por el vector de entrada rojo
    VADD V4, V4, V6; Se multiplican los vectores y se guardan en ResVerde

    MOVI R0, b0000000001010111110; Se guarda el valor en binario
    VSMUL V6, V1, R0; Se multiplica el escalar por el vector de entrada verde
    VADD V4, V4, V6; Se multiplican los vectores y se guardan en ResVerde

    MOVI R0, b0000000000010101100; Se mueve el binario al registro
    VSMUL V6, V2, R0; Se multiplica el escalar por el vector de entrada azul
    VADD V4, V4, V6; Se multiplican los vectores y se guardan en ResVerde

    ;Pedazo de codigo para la mascara
    VMOVI V7, b111111110000000000; Vector 255 en binario
    VMOVI V6, 0; Se resetean los valores del vector
    VCMPLT V4, V6;Vector mascara para Red
    VMOVV V4, V4, V7; Se usa el comparador con la mascara, ya sea de V3 o de V6
    VCMPRST




    ;CODIGO PARA EL OUTPUT BLUE
    VMOVI V5, 0; Se inicializa el vector de resultados azul

    MOVI R0, b0000000000100010110; Se mueve el numero al registro
    VSMUL V6, V0, R0; Se multiplica el escalar por el vector de entrada rojo
    VADD V5, V5, V6; Se multiplican los vectores y se guardan en ResAzul

    MOVI R0, b0000000001000100010; Se guarda el valor en binario
    VSMUL V6, V1, R0; Se multiplica el escalar por el vector de entrada verde
    VADD V5, V5, V6; Se multiplican los vectores y se guardan en ResAzul

    MOVI R0, b0000000000010000110; Se mueve el binario al registro
    VSMUL V6, V2, R0; Se multiplica el escalar por el vector de entrada azul
    VADD V5, V5, V6; Se multiplican los vectores y se guardan en ResAzul

    ;Pedazo de codigo para la mascara
    VMOVI V7, b111111110000000000; Vector 255 en binario
    VMOVI V6, 0; Se resetean los valores del vector
    VCMPLT V5, V6;Vector mascara para Red
    VMOVV V5, V5, V7; Se usa el comparador con la mascara, ya sea de V3 o de V6
    VCMPRST

    JMP _filterReturn



_grey

    VMOVI V3, 0;
    MOVI R0, b0000000000100110011; Se mueve el numero al registro
    VSMUL V6, V0, R0; Se multiplica el escalar por el vector de entrada rojo
    VADD V3, V3, V6; Se multiplican los vectores y se guardan en ResRojo

    MOVI R0, b0000000001001011100; Se mueve el numero al registro
    VSMUL V6, V1, R0; Se multiplica el escalar por el vector de entrada rojo
    VADD V3, V3, V6; Se multiplican los vectores y se guardan en ResRojo

    MOVI R0, b0000000000001110000; Se mueve el numero al registro
    VSMUL V6, V2, R0; Se multiplica el escalar por el vector de entrada rojo
    VADD V3, V3, V6; Se multiplican los vectores y se guardan en ResRojo

    VMOVV V4, V3; Se mueve el resultado de red al vector green
    VMOVV V5, V3; Se mueve el resultado de red al vector blue

    JMP _filterReturn

_negative
    VMOVI V3, b0111111110000000000 ; Se rellena todo el vector con el valor indicado
    VSUB V3, V3, V0; Se resta vector de resultado rojo menos entrada rojo y se guarda en resultado rojo

    VMOVI V4, b0111111110000000000 ; Se rellena todo el vector con el valor indicado
    VSUB V4, V4, V1; Se resta vector de resultado verde menos entrada verde y se guarda en resultado verde

    VMOVI V5, b0111111110000000000 ; Se rellena todo el vector con el valor indicado
    VSUB V5, V5, V2; Se resta vector de resultado azul menos entrada azul y se guarda en resultado azul
    
    JMP _filterReturn

_declarar
    MOVI R1, 0
    MOVI R2, 0 ;ESC_INDEX
    JMP _whileTrue

_whileTrue
    MOVI R4, 2000 ; 2000 a un registro temporal    
    MOVI R5, 2000 ; 2000 a un registro temporal  
    ADD R5, R5, R4 ; Se suman para dar 130000
    MOVI R4, 800 ; 800 a un registro temporal
    ADD R0, R4, R5 ; Se anade 450*400 = 180 000 al registro ESC_TEMP_1
    
    CMP R2, R0 ; para ver si se hace el branch
    BGE _end  ; Se manda a terminar el programa
    
    VLDR V0, R2; se hace un load de R2 a V0
    MOVI R0, 1; Se mueve el escalar temporal a 1
    ADD R2, R2, R0; Se suma R2, R0 y se guarda en R2

    VLDR V1, R2; se hace un load de R2 a V0
    MOVI R0, 1; Se mueve el escalar temporal a 1
    ADD R2, R2, R0; Se suma R2, R0 y se guarda en R2 

    VLDR V2, R2; se hace un load de R2 a V0
    MOVI R0, 1; Se mueve el escalar temporal a 1
    ADD R2, R2, R0; Se suma R2, R0 y se guarda en R2

    ;Seccion para seleccionar el 
    MOVI R5, 0 ; 
    MOVI R6, 1
    MOVI R7, 2

    CMP R1, R5 ; Se compara a ver si se hace el salto
    BE _sepia  ; Modo sepia
    CMP R1, R6 ; Comparacion
    BE _grey   ; Modo Grey
    CMP R1, R7 ; Se compara
    BE _negative ; Modo negativo

_filterReturn

    MOVI R0, 3 ;Se carga 3 en binario
    SUB R2, R2, R0 ;Se le resta 3 al index

    VSTR R2, V3 ;Se hace un store
    VOUT R2;
    MOVI R0, 1;
    ADD R2, R2, R0

    VSTR R2, V4 ;Se hace un store
    VOUT R2;
    MOVI R0, 1;
    ADD R2, R2, R0

    VSTR R2, V5 ;Se hace un store
    VOUT R2;
    MOVI R0, 1;
    ADD R2, R2, R0


    
    JMP _whileTrue ;Se mantiene el ciclo hasta que el primer condicional se cumpla

_end
    MOVI R0, 0


