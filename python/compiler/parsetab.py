
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD BE BGE BIMM CMP COMMA COMMENT IMM JMP LABEL MOVI NOP REG SLDR SUB VADD VCMPLT VCMPRST VLDR VMOVI VMOVV VOUT VSMUL VSTR VSUB\n    code : body\n    \n    body : instruction body\n         | label body\n    \n    body :\n    \n    label : LABEL\n    \n    instruction : spe_instr\n                | ari_instr\n                | reg_instr\n                | mem_instr\n                | bra_instr\n    \n    ari_instr : ari_instr_name REG COMMA REG COMMA REG\n    \n    reg_instr : reg_instr_name REG COMMA REG COMMA REG\n              | reg_instr_name REG COMMA REG\n              | reg_instr_name REG COMMA IMM\n              | reg_instr_name REG COMMA BIMM\n              | reg_instr_name\n    \n    mem_instr : mem_instr_name REG COMMA REG\n              | mem_instr_name REG\n    \n    bra_instr : bra_instr_name LABEL\n    \n    spe_instr : NOP\n    \n    ari_instr_name : ADD\n                   | SUB\n                   | VADD\n                   | VSUB\n                   | VSMUL\n    \n    reg_instr_name : MOVI\n                   | CMP\n                   | VMOVV\n                   | VMOVI\n                   | VCMPLT\n                   | VCMPRST\n    \n    mem_instr_name : VSTR\n                   | VLDR\n                   | SLDR\n                   | VOUT\n    \n    bra_instr_name : JMP\n                   | BGE\n                   | BE\n    '
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,11,13,21,22,23,24,25,26,34,35,38,39,44,45,46,47,50,51,],[-4,0,-1,-4,-4,-6,-7,-8,-9,-10,-5,-20,-16,-26,-27,-28,-29,-30,-31,-2,-3,-18,-19,-13,-14,-15,-17,-11,-12,]),'LABEL':([0,3,4,5,6,7,8,9,10,11,13,15,21,22,23,24,25,26,31,32,33,38,39,44,45,46,47,50,51,],[10,10,10,-6,-7,-8,-9,-10,-5,-20,-16,39,-26,-27,-28,-29,-30,-31,-36,-37,-38,-18,-19,-13,-14,-15,-17,-11,-12,]),'NOP':([0,3,4,5,6,7,8,9,10,11,13,21,22,23,24,25,26,38,39,44,45,46,47,50,51,],[11,11,11,-6,-7,-8,-9,-10,-5,-20,-16,-26,-27,-28,-29,-30,-31,-18,-19,-13,-14,-15,-17,-11,-12,]),'ADD':([0,3,4,5,6,7,8,9,10,11,13,21,22,23,24,25,26,38,39,44,45,46,47,50,51,],[16,16,16,-6,-7,-8,-9,-10,-5,-20,-16,-26,-27,-28,-29,-30,-31,-18,-19,-13,-14,-15,-17,-11,-12,]),'SUB':([0,3,4,5,6,7,8,9,10,11,13,21,22,23,24,25,26,38,39,44,45,46,47,50,51,],[17,17,17,-6,-7,-8,-9,-10,-5,-20,-16,-26,-27,-28,-29,-30,-31,-18,-19,-13,-14,-15,-17,-11,-12,]),'VADD':([0,3,4,5,6,7,8,9,10,11,13,21,22,23,24,25,26,38,39,44,45,46,47,50,51,],[18,18,18,-6,-7,-8,-9,-10,-5,-20,-16,-26,-27,-28,-29,-30,-31,-18,-19,-13,-14,-15,-17,-11,-12,]),'VSUB':([0,3,4,5,6,7,8,9,10,11,13,21,22,23,24,25,26,38,39,44,45,46,47,50,51,],[19,19,19,-6,-7,-8,-9,-10,-5,-20,-16,-26,-27,-28,-29,-30,-31,-18,-19,-13,-14,-15,-17,-11,-12,]),'VSMUL':([0,3,4,5,6,7,8,9,10,11,13,21,22,23,24,25,26,38,39,44,45,46,47,50,51,],[20,20,20,-6,-7,-8,-9,-10,-5,-20,-16,-26,-27,-28,-29,-30,-31,-18,-19,-13,-14,-15,-17,-11,-12,]),'MOVI':([0,3,4,5,6,7,8,9,10,11,13,21,22,23,24,25,26,38,39,44,45,46,47,50,51,],[21,21,21,-6,-7,-8,-9,-10,-5,-20,-16,-26,-27,-28,-29,-30,-31,-18,-19,-13,-14,-15,-17,-11,-12,]),'CMP':([0,3,4,5,6,7,8,9,10,11,13,21,22,23,24,25,26,38,39,44,45,46,47,50,51,],[22,22,22,-6,-7,-8,-9,-10,-5,-20,-16,-26,-27,-28,-29,-30,-31,-18,-19,-13,-14,-15,-17,-11,-12,]),'VMOVV':([0,3,4,5,6,7,8,9,10,11,13,21,22,23,24,25,26,38,39,44,45,46,47,50,51,],[23,23,23,-6,-7,-8,-9,-10,-5,-20,-16,-26,-27,-28,-29,-30,-31,-18,-19,-13,-14,-15,-17,-11,-12,]),'VMOVI':([0,3,4,5,6,7,8,9,10,11,13,21,22,23,24,25,26,38,39,44,45,46,47,50,51,],[24,24,24,-6,-7,-8,-9,-10,-5,-20,-16,-26,-27,-28,-29,-30,-31,-18,-19,-13,-14,-15,-17,-11,-12,]),'VCMPLT':([0,3,4,5,6,7,8,9,10,11,13,21,22,23,24,25,26,38,39,44,45,46,47,50,51,],[25,25,25,-6,-7,-8,-9,-10,-5,-20,-16,-26,-27,-28,-29,-30,-31,-18,-19,-13,-14,-15,-17,-11,-12,]),'VCMPRST':([0,3,4,5,6,7,8,9,10,11,13,21,22,23,24,25,26,38,39,44,45,46,47,50,51,],[26,26,26,-6,-7,-8,-9,-10,-5,-20,-16,-26,-27,-28,-29,-30,-31,-18,-19,-13,-14,-15,-17,-11,-12,]),'VSTR':([0,3,4,5,6,7,8,9,10,11,13,21,22,23,24,25,26,38,39,44,45,46,47,50,51,],[27,27,27,-6,-7,-8,-9,-10,-5,-20,-16,-26,-27,-28,-29,-30,-31,-18,-19,-13,-14,-15,-17,-11,-12,]),'VLDR':([0,3,4,5,6,7,8,9,10,11,13,21,22,23,24,25,26,38,39,44,45,46,47,50,51,],[28,28,28,-6,-7,-8,-9,-10,-5,-20,-16,-26,-27,-28,-29,-30,-31,-18,-19,-13,-14,-15,-17,-11,-12,]),'SLDR':([0,3,4,5,6,7,8,9,10,11,13,21,22,23,24,25,26,38,39,44,45,46,47,50,51,],[29,29,29,-6,-7,-8,-9,-10,-5,-20,-16,-26,-27,-28,-29,-30,-31,-18,-19,-13,-14,-15,-17,-11,-12,]),'VOUT':([0,3,4,5,6,7,8,9,10,11,13,21,22,23,24,25,26,38,39,44,45,46,47,50,51,],[30,30,30,-6,-7,-8,-9,-10,-5,-20,-16,-26,-27,-28,-29,-30,-31,-18,-19,-13,-14,-15,-17,-11,-12,]),'JMP':([0,3,4,5,6,7,8,9,10,11,13,21,22,23,24,25,26,38,39,44,45,46,47,50,51,],[31,31,31,-6,-7,-8,-9,-10,-5,-20,-16,-26,-27,-28,-29,-30,-31,-18,-19,-13,-14,-15,-17,-11,-12,]),'BGE':([0,3,4,5,6,7,8,9,10,11,13,21,22,23,24,25,26,38,39,44,45,46,47,50,51,],[32,32,32,-6,-7,-8,-9,-10,-5,-20,-16,-26,-27,-28,-29,-30,-31,-18,-19,-13,-14,-15,-17,-11,-12,]),'BE':([0,3,4,5,6,7,8,9,10,11,13,21,22,23,24,25,26,38,39,44,45,46,47,50,51,],[33,33,33,-6,-7,-8,-9,-10,-5,-20,-16,-26,-27,-28,-29,-30,-31,-18,-19,-13,-14,-15,-17,-11,-12,]),'REG':([12,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,40,41,42,48,49,],[36,37,38,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,43,44,47,50,51,]),'COMMA':([36,37,38,43,44,],[40,41,42,48,49,]),'IMM':([41,],[45,]),'BIMM':([41,],[46,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'code':([0,],[1,]),'body':([0,3,4,],[2,34,35,]),'instruction':([0,3,4,],[3,3,3,]),'label':([0,3,4,],[4,4,4,]),'spe_instr':([0,3,4,],[5,5,5,]),'ari_instr':([0,3,4,],[6,6,6,]),'reg_instr':([0,3,4,],[7,7,7,]),'mem_instr':([0,3,4,],[8,8,8,]),'bra_instr':([0,3,4,],[9,9,9,]),'ari_instr_name':([0,3,4,],[12,12,12,]),'reg_instr_name':([0,3,4,],[13,13,13,]),'mem_instr_name':([0,3,4,],[14,14,14,]),'bra_instr_name':([0,3,4,],[15,15,15,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> code","S'",1,None,None,None),
  ('code -> body','code',1,'p_code','Syntaxer.py',13),
  ('body -> instruction body','body',2,'p_body','Syntaxer.py',20),
  ('body -> label body','body',2,'p_body','Syntaxer.py',21),
  ('body -> <empty>','body',0,'p_empty','Syntaxer.py',28),
  ('label -> LABEL','label',1,'p_label','Syntaxer.py',35),
  ('instruction -> spe_instr','instruction',1,'p_instruction','Syntaxer.py',47),
  ('instruction -> ari_instr','instruction',1,'p_instruction','Syntaxer.py',48),
  ('instruction -> reg_instr','instruction',1,'p_instruction','Syntaxer.py',49),
  ('instruction -> mem_instr','instruction',1,'p_instruction','Syntaxer.py',50),
  ('instruction -> bra_instr','instruction',1,'p_instruction','Syntaxer.py',51),
  ('ari_instr -> ari_instr_name REG COMMA REG COMMA REG','ari_instr',6,'p_ari_instr','Syntaxer.py',59),
  ('reg_instr -> reg_instr_name REG COMMA REG COMMA REG','reg_instr',6,'p_reg_instr','Syntaxer.py',71),
  ('reg_instr -> reg_instr_name REG COMMA REG','reg_instr',4,'p_reg_instr','Syntaxer.py',72),
  ('reg_instr -> reg_instr_name REG COMMA IMM','reg_instr',4,'p_reg_instr','Syntaxer.py',73),
  ('reg_instr -> reg_instr_name REG COMMA BIMM','reg_instr',4,'p_reg_instr','Syntaxer.py',74),
  ('reg_instr -> reg_instr_name','reg_instr',1,'p_reg_instr','Syntaxer.py',75),
  ('mem_instr -> mem_instr_name REG COMMA REG','mem_instr',4,'p_mem_instr','Syntaxer.py',92),
  ('mem_instr -> mem_instr_name REG','mem_instr',2,'p_mem_instr','Syntaxer.py',93),
  ('bra_instr -> bra_instr_name LABEL','bra_instr',2,'p_bra_instr','Syntaxer.py',105),
  ('spe_instr -> NOP','spe_instr',1,'p_spe_instr','Syntaxer.py',114),
  ('ari_instr_name -> ADD','ari_instr_name',1,'p_ari_instr_name','Syntaxer.py',123),
  ('ari_instr_name -> SUB','ari_instr_name',1,'p_ari_instr_name','Syntaxer.py',124),
  ('ari_instr_name -> VADD','ari_instr_name',1,'p_ari_instr_name','Syntaxer.py',125),
  ('ari_instr_name -> VSUB','ari_instr_name',1,'p_ari_instr_name','Syntaxer.py',126),
  ('ari_instr_name -> VSMUL','ari_instr_name',1,'p_ari_instr_name','Syntaxer.py',127),
  ('reg_instr_name -> MOVI','reg_instr_name',1,'p_reg_instr_name','Syntaxer.py',135),
  ('reg_instr_name -> CMP','reg_instr_name',1,'p_reg_instr_name','Syntaxer.py',136),
  ('reg_instr_name -> VMOVV','reg_instr_name',1,'p_reg_instr_name','Syntaxer.py',137),
  ('reg_instr_name -> VMOVI','reg_instr_name',1,'p_reg_instr_name','Syntaxer.py',138),
  ('reg_instr_name -> VCMPLT','reg_instr_name',1,'p_reg_instr_name','Syntaxer.py',139),
  ('reg_instr_name -> VCMPRST','reg_instr_name',1,'p_reg_instr_name','Syntaxer.py',140),
  ('mem_instr_name -> VSTR','mem_instr_name',1,'p_mem_instr_name','Syntaxer.py',148),
  ('mem_instr_name -> VLDR','mem_instr_name',1,'p_mem_instr_name','Syntaxer.py',149),
  ('mem_instr_name -> SLDR','mem_instr_name',1,'p_mem_instr_name','Syntaxer.py',150),
  ('mem_instr_name -> VOUT','mem_instr_name',1,'p_mem_instr_name','Syntaxer.py',151),
  ('bra_instr_name -> JMP','bra_instr_name',1,'p_bra_instr_name','Syntaxer.py',159),
  ('bra_instr_name -> BGE','bra_instr_name',1,'p_bra_instr_name','Syntaxer.py',160),
  ('bra_instr_name -> BE','bra_instr_name',1,'p_bra_instr_name','Syntaxer.py',161),
]
